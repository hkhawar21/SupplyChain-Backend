generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int        @id @default(autoincrement())
  name     String
  email    String     @unique
  password String
  role     AccessRole
}

model Vendor {
  id             Int    @id @default(autoincrement())
  name           String
  contact        String
  address        String
  price_per_unit Float
  // Raw materials
}

model Customer {
  id         Int    @id @default(autoincrement())
  first_name String
  last_name  String
  contact    String
}

model Order {
  id           Int            @id @default(autoincrement())
  quantity     Int
  status       OrderStatus
  amount       Float
  address      String
  products     ProductOrder[]
  customer_id  Int?
  inventory    Inventory      @relation(fields: [inventory_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventory_id Int            @default(0)
}

model Product {
  id             Int                   @id @default(autoincrement())
  name           String
  price_per_unit Float
  status         Boolean
  image          String?
  weight         Float
  product_order  ProductOrder[]
  inventory      Inventory[]
  category       Category              @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category_id    Int
  raw_materials  ProductRawMaterials[]
}

model ProductOrder {
  id         Int     @id @default(autoincrement())
  name       String
  quantity   Int
  price      Float
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id Int
  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order_id   Int
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  status   Boolean
  image    String?
  products Product[]

  @@unique([name, id])
}

model ProductRawMaterials {
  id            Int           @id @default(autoincrement())
  raw_materials RawMaterial[]
  product       Product       @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id    Int
}

model RawMaterial {
  id           Int                   @id @default(autoincrement())
  name         String
  quantity     Int
  price        Float
  status       Boolean
  products     ProductRawMaterials[]
  inventory    Inventory             @relation(fields: [inventory_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventory_id Int
}

model Warehouse {
  id           Int    @id @default(autoincrement())
  address      String
  contact      String
  email        String @unique
  phone_number Int
  // Products id array
}

model Agent {
  id           Int     @id @default(autoincrement())
  name         String
  address      String
  phone_number String
  city         String
  status       Boolean
}

model Inventory {
  id            Int           @id @default(autoincrement())
  raw_materials RawMaterial[]
  products      Product       @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id    Int
  orders        Order[]
}

enum AccessRole {
  finance
  orders
  products
  customers
  agents
  warehouse
  inventory
  admin
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}
