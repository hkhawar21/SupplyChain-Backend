# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

enum AccessRole {
  admin
  agents
  customers
  finance
  inventory
  orders
  products
  warehouse
}

type Agent {
  address: String!
  city: String!
  id: Int!
  name: String!
  phone_number: String!
  status: Boolean!
}

input AgentCreateInput {
  address: String!
  city: String!
  name: String!
  phone_number: String!
  status: Boolean!
}

input AgentUpdateInput {
  address: String
  city: String
  id: Int!
  name: String
  phone_number: String
  status: Boolean
}

type AuthenticationToken {
  authenticationToken: String!
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Category {
  _count: CategoryCount
  id: Int!
  image: String
  name: String!
  products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  status: Boolean!
}

type CategoryCount {
  products: Int!
}

input CategoryOrderByWithRelationInput {
  id: SortOrder
  image: SortOrder
  name: SortOrder
  products: ProductOrderByRelationAggregateInput
  status: SortOrder
}

input CategoryRelationFilter {
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  id: IntFilter
  image: StringNullableFilter
  name: StringFilter
  products: ProductListRelationFilter
  status: BoolFilter
}

input EnumOrderStatusFilter {
  equals: OrderStatus
  in: [OrderStatus!]
  not: NestedEnumOrderStatusFilter
  notIn: [OrderStatus!]
}

input EnumRawMaterialStatusFilter {
  equals: RawMaterialStatus
  in: [RawMaterialStatus!]
  not: NestedEnumRawMaterialStatusFilter
  notIn: [RawMaterialStatus!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Inventory {
  _count: InventoryCount
  id: Int!
  orders(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum!], orderBy: [OrderOrderByWithRelationInput!], skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  product_id: Int!
  products: Product!
  raw_materials(cursor: RawMaterialWhereUniqueInput, distinct: [RawMaterialScalarFieldEnum!], orderBy: [RawMaterialOrderByWithRelationInput!], skip: Int, take: Int, where: RawMaterialWhereInput): [RawMaterial!]!
}

type InventoryCount {
  orders: Int!
  raw_materials: Int!
}

input InventoryListRelationFilter {
  every: InventoryWhereInput
  none: InventoryWhereInput
  some: InventoryWhereInput
}

input InventoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input InventoryOrderByWithRelationInput {
  id: SortOrder
  orders: OrderOrderByRelationAggregateInput
  product_id: SortOrder
  products: ProductOrderByWithRelationInput
  raw_materials: RawMaterialOrderByRelationAggregateInput
}

input InventoryRelationFilter {
  is: InventoryWhereInput
  isNot: InventoryWhereInput
}

enum InventoryScalarFieldEnum {
  id
  product_id
}

input InventoryWhereInput {
  AND: [InventoryWhereInput!]
  NOT: [InventoryWhereInput!]
  OR: [InventoryWhereInput!]
  id: IntFilter
  orders: OrderListRelationFilter
  product_id: IntFilter
  products: ProductRelationFilter
  raw_materials: RawMaterialListRelationFilter
}

input InventoryWhereUniqueInput {
  id: Int
}

type Mutation {
  addProductToOrder(id: Int!, productOrderCreateInput: [ProductOrderCreateInput!]!): Order!
  addRawMaterialToProduct(productId: Int!, quantity: Int!, rawMaterialId: Int!): Product!
  approveOrderRequest(orderId: Int!): Order!
  changeStatusRawMaterial(id: Int!, status: RawMaterialStatus!): RawMaterial!
  createAgent(agentCreateInput: AgentCreateInput!): Agent!
  createCategory(image: String!, name: String!, status: Boolean!): Category!
  createOrder(orderCreateInput: OrderCreateInput!): Order!
  createOrderRequest(orderCreateInput: OrderCreateInputInventory!): Order!
  createProduct(productInput: ProductInput!): Product!
  createRawMaterial(rawMaterialInput: RawMaterialInput!): RawMaterial!
  createRawMaterialRequest(rawMaterialRequestInput: RawMaterialRequestInput!): RawMaterial!
  deleteAgent(id: Int!): Boolean!
  deleteCategory(id: Int!): Boolean!
  deleteOrder(id: Int!): Order!
  deleteProduct(id: Int!): Product!
  deleteRawMaterial(id: Int!): RawMaterial!
  login(email: String!, password: String!): AuthenticationToken!
  removeProductFromOrder(id: Int!): Order!
  removeRawMaterialFromProduct(productId: Int!, rawMaterialId: Int!): Product!
  signup(email: String!, name: String!, password: String!, role: String!): AuthenticationToken!
  updateAgent(agentUpdateInput: AgentUpdateInput!): Agent!
  updateCategory(id: Float!, image: String!, name: String!, status: Boolean!): Category!
  updateOrderDetails(data: OrderUpdateInput!, id: Int!): Order!
  updateProduct(productUpdateInput: ProductUpdateInput!): Product!
  updateRawMaterial(rawMaterialInput: RawMaterialUpdateInput!): RawMaterial!
  updateStatus(id: Int!, status: Int!): Order!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedEnumOrderStatusFilter {
  equals: OrderStatus
  in: [OrderStatus!]
  not: NestedEnumOrderStatusFilter
  notIn: [OrderStatus!]
}

input NestedEnumRawMaterialStatusFilter {
  equals: RawMaterialStatus
  in: [RawMaterialStatus!]
  not: NestedEnumRawMaterialStatusFilter
  notIn: [RawMaterialStatus!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Order {
  _count: OrderCount
  address: String!
  amount: Float!
  customer_id: Int
  id: Int!
  inventory: Inventory!
  inventory_id: Int!
  products(cursor: ProductOrderWhereUniqueInput, distinct: [ProductOrderScalarFieldEnum!], orderBy: [ProductOrderOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOrderWhereInput): [ProductOrder!]!
  quantity: Int!
  status: OrderStatus!
}

type OrderCount {
  products: Int!
}

input OrderCreateInput {
  address: String!
  amount: Float!
  customer_id: Int
  products: [ProductOrderCreateInput!]!
  quantity: Int!
}

input OrderCreateInputInventory {
  address: String!
  amount: Float!
  customer_id: Int
  products: [ProductOrderCreateInput!]!
  quantity: Int!
  status: OrderStatus!
}

input OrderListRelationFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

input OrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderOrderByWithRelationInput {
  address: SortOrder
  amount: SortOrder
  customer_id: SortOrder
  id: SortOrder
  inventory: InventoryOrderByWithRelationInput
  inventory_id: SortOrder
  products: ProductOrderOrderByRelationAggregateInput
  quantity: SortOrder
  status: SortOrder
}

input OrderRelationFilter {
  is: OrderWhereInput
  isNot: OrderWhereInput
}

enum OrderScalarFieldEnum {
  address
  amount
  customer_id
  id
  inventory_id
  quantity
  status
}

enum OrderStatus {
  CANCELLED
  DELIVERED
  PENDING
  PROCESSING
}

input OrderUpdateInput {
  address: String
  amount: Float
  customer_id: Int
  products: [ProductOrderUpdateInput!]!
  quantity: Int
  status: OrderStatus
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  address: StringFilter
  amount: FloatFilter
  customer_id: IntNullableFilter
  id: IntFilter
  inventory: InventoryRelationFilter
  inventory_id: IntFilter
  products: ProductOrderListRelationFilter
  quantity: IntFilter
  status: EnumOrderStatusFilter
}

input OrderWhereUniqueInput {
  id: Int
}

type Product {
  _count: ProductCount
  category: Category!
  category_id: Int!
  id: Int!
  image: String
  inventory(cursor: InventoryWhereUniqueInput, distinct: [InventoryScalarFieldEnum!], orderBy: [InventoryOrderByWithRelationInput!], skip: Int, take: Int, where: InventoryWhereInput): [Inventory!]!
  name: String!
  presentInInventory: Int!
  price_per_unit: Float!
  product_order(cursor: ProductOrderWhereUniqueInput, distinct: [ProductOrderScalarFieldEnum!], orderBy: [ProductOrderOrderByWithRelationInput!], skip: Int, take: Int, where: ProductOrderWhereInput): [ProductOrder!]!
  raw_materials(cursor: ProductRawMaterialsWhereUniqueInput, distinct: [ProductRawMaterialsScalarFieldEnum!], orderBy: [ProductRawMaterialsOrderByWithRelationInput!], skip: Int, take: Int, where: ProductRawMaterialsWhereInput): [ProductRawMaterials!]!
  status: Boolean!
  time: String!
  weight: Float!
}

type ProductCount {
  inventory: Int!
  product_order: Int!
  raw_materials: Int!
}

input ProductInput {
  category_id: Int!
  image: String!
  name: String!
  presentInInventory: Float!
  price_per_unit: Float!
  raw_materials: [ProductRawMaterialsInput!]!
  status: Boolean!
  time: String!
  weight: Float!
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

type ProductOrder {
  id: Int!
  name: String!
  order: Order!
  order_id: Int!
  price: Float!
  product: Product!
  product_id: Int!
  quantity: Int!
}

input ProductOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductOrderByWithRelationInput {
  category: CategoryOrderByWithRelationInput
  category_id: SortOrder
  id: SortOrder
  image: SortOrder
  inventory: InventoryOrderByRelationAggregateInput
  name: SortOrder
  presentInInventory: SortOrder
  price_per_unit: SortOrder
  product_order: ProductOrderOrderByRelationAggregateInput
  raw_materials: ProductRawMaterialsOrderByRelationAggregateInput
  status: SortOrder
  time: SortOrder
  weight: SortOrder
}

input ProductOrderCreateInput {
  name: String!
  price: Float!
  product_id: Int!
  quantity: Int!
}

input ProductOrderListRelationFilter {
  every: ProductOrderWhereInput
  none: ProductOrderWhereInput
  some: ProductOrderWhereInput
}

input ProductOrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductOrderOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  order: OrderOrderByWithRelationInput
  order_id: SortOrder
  price: SortOrder
  product: ProductOrderByWithRelationInput
  product_id: SortOrder
  quantity: SortOrder
}

enum ProductOrderScalarFieldEnum {
  id
  name
  order_id
  price
  product_id
  quantity
}

input ProductOrderUpdateInput {
  id: Int!
  name: String!
  order_id: Int
  price: Float!
  product_id: Int!
  quantity: Int!
}

input ProductOrderWhereInput {
  AND: [ProductOrderWhereInput!]
  NOT: [ProductOrderWhereInput!]
  OR: [ProductOrderWhereInput!]
  id: IntFilter
  name: StringFilter
  order: OrderRelationFilter
  order_id: IntFilter
  price: FloatFilter
  product: ProductRelationFilter
  product_id: IntFilter
  quantity: IntFilter
}

input ProductOrderWhereUniqueInput {
  id: Int
}

input ProductRawMaterialUpdate {
  id: Int!
  quantity: Int!
}

type ProductRawMaterials {
  id: Int!
  product: Product!
  product_id: Int!
  quantity: Int!
  raw_material: RawMaterial!
  raw_material_id: Int!
}

input ProductRawMaterialsInput {
  quantity: Int!
  raw_material_id: Int!
}

input ProductRawMaterialsListRelationFilter {
  every: ProductRawMaterialsWhereInput
  none: ProductRawMaterialsWhereInput
  some: ProductRawMaterialsWhereInput
}

input ProductRawMaterialsOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductRawMaterialsOrderByWithRelationInput {
  id: SortOrder
  product: ProductOrderByWithRelationInput
  product_id: SortOrder
  quantity: SortOrder
  raw_material: RawMaterialOrderByWithRelationInput
  raw_material_id: SortOrder
}

enum ProductRawMaterialsScalarFieldEnum {
  id
  product_id
  quantity
  raw_material_id
}

input ProductRawMaterialsWhereInput {
  AND: [ProductRawMaterialsWhereInput!]
  NOT: [ProductRawMaterialsWhereInput!]
  OR: [ProductRawMaterialsWhereInput!]
  id: IntFilter
  product: ProductRelationFilter
  product_id: IntFilter
  quantity: IntFilter
  raw_material: RawMaterialRelationFilter
  raw_material_id: IntFilter
}

input ProductRawMaterialsWhereUniqueInput {
  id: Int
}

input ProductRelationFilter {
  is: ProductWhereInput
  isNot: ProductWhereInput
}

enum ProductScalarFieldEnum {
  category_id
  id
  image
  name
  presentInInventory
  price_per_unit
  status
  time
  weight
}

input ProductUpdateInput {
  category_id: Int
  id: Int!
  image: String
  name: String
  presentInInventory: Int
  price_per_unit: Float
  raw_materials: [ProductRawMaterialUpdate!]
  status: Boolean
  time: String
  weight: Float
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  category: CategoryRelationFilter
  category_id: IntFilter
  id: IntFilter
  image: StringNullableFilter
  inventory: InventoryListRelationFilter
  name: StringFilter
  presentInInventory: IntFilter
  price_per_unit: FloatFilter
  product_order: ProductOrderListRelationFilter
  raw_materials: ProductRawMaterialsListRelationFilter
  status: BoolFilter
  time: StringFilter
  weight: FloatFilter
}

input ProductWhereUniqueInput {
  id: Int
}

type Query {
  agentById(id: Float!): Agent!
  agents: [Agent!]!
  categories: [Category!]!
  categoryById(id: Float!): Category!
  orderById(id: Int!): Order!
  orders: [Order!]!
  ordersByCustomerId(id: Int!): [Order!]!
  ordersRequested: [Order!]!
  productById(id: Int!): Product!
  products: [Product!]!
  productsInInventory: [Product!]!
  rawMaterial: [RawMaterial!]!
  rawMaterialRequested: [RawMaterial!]!
  rawMaterialsInInventory: [RawMaterial!]!
  userById(id: Int!): User!
  users: [User!]!
}

enum QueryMode {
  default
  insensitive
}

type RawMaterial {
  _count: RawMaterialCount
  id: Int!
  inventory: Inventory!
  inventory_id: Int!
  name: String!
  presentInInventory: Int!
  price: Float!
  products(cursor: ProductRawMaterialsWhereUniqueInput, distinct: [ProductRawMaterialsScalarFieldEnum!], orderBy: [ProductRawMaterialsOrderByWithRelationInput!], skip: Int, take: Int, where: ProductRawMaterialsWhereInput): [ProductRawMaterials!]!
  quantity: Int!
  requested: Int!
  requestedStatus: RawMaterialStatus!
  status: Boolean!
}

type RawMaterialCount {
  products: Int!
}

input RawMaterialInput {
  name: String!
  presentInInventory: Float!
  price: Float!
  quantity: Int!
  status: Boolean!
}

input RawMaterialListRelationFilter {
  every: RawMaterialWhereInput
  none: RawMaterialWhereInput
  some: RawMaterialWhereInput
}

input RawMaterialOrderByRelationAggregateInput {
  _count: SortOrder
}

input RawMaterialOrderByWithRelationInput {
  id: SortOrder
  inventory: InventoryOrderByWithRelationInput
  inventory_id: SortOrder
  name: SortOrder
  presentInInventory: SortOrder
  price: SortOrder
  products: ProductRawMaterialsOrderByRelationAggregateInput
  quantity: SortOrder
  requested: SortOrder
  requestedStatus: SortOrder
  status: SortOrder
}

input RawMaterialRelationFilter {
  is: RawMaterialWhereInput
  isNot: RawMaterialWhereInput
}

input RawMaterialRequestInput {
  quantity: Int!
  raw_material_id: Int!
}

enum RawMaterialScalarFieldEnum {
  id
  inventory_id
  name
  presentInInventory
  price
  quantity
  requested
  requestedStatus
  status
}

enum RawMaterialStatus {
  APPROVED
  PENDING
  REJECTED
}

input RawMaterialUpdateInput {
  id: Int!
  name: String
  presentInInventory: Int
  price: Float
  quantity: Int
  status: Boolean
}

input RawMaterialWhereInput {
  AND: [RawMaterialWhereInput!]
  NOT: [RawMaterialWhereInput!]
  OR: [RawMaterialWhereInput!]
  id: IntFilter
  inventory: InventoryRelationFilter
  inventory_id: IntFilter
  name: StringFilter
  presentInInventory: IntFilter
  price: FloatFilter
  products: ProductRawMaterialsListRelationFilter
  quantity: IntFilter
  requested: IntFilter
  requestedStatus: EnumRawMaterialStatusFilter
  status: BoolFilter
}

input RawMaterialWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  id: Int!
  name: String!
  password: String!
  role: AccessRole!
}
